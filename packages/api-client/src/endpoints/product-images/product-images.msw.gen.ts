/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * PIM (Product Information Management) API
 * 商品情報管理システムのAPI定義
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import {
  ImageType
} from '../../model';
import type {
  ProductImage
} from '../../model';


export const getGetProductsProductIdImagesResponseMock = (): ProductImage[] => (Array.from({ length: faker.number.int({ min: 0, max: 100 }) }, (_, i) => i + 1).map(() => ({image_id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), product_id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), image_type: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ImageType)), undefined]), file_name: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), file_size: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mime_type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), url: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), alt_text: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), display_order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), is_primary: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), created_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updated_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})))

export const getPostProductsProductIdImagesResponseMock = (overrideResponse: Partial< ProductImage > = {}): ProductImage => ({image_id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), product_id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), image_type: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ImageType)), undefined]), file_name: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), file_size: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mime_type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), url: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), alt_text: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), display_order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), is_primary: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), created_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updated_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), ...overrideResponse})

export const getPutProductsProductIdImagesImageIdResponseMock = (overrideResponse: Partial< ProductImage > = {}): ProductImage => ({image_id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), product_id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), image_type: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ImageType)), undefined]), file_name: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), file_size: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mime_type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), url: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), alt_text: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), display_order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), is_primary: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), created_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updated_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), ...overrideResponse})


export const getGetProductsProductIdImagesMockHandler = (overrideResponse?: ProductImage[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ProductImage[]> | ProductImage[])) => {
  return http.get('*/products/:productId/images', async (info) => {await delay(3000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetProductsProductIdImagesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostProductsProductIdImagesMockHandler = (overrideResponse?: ProductImage | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<ProductImage> | ProductImage)) => {
  return http.post('*/products/:productId/images', async (info) => {await delay(3000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getPostProductsProductIdImagesResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPutProductsProductIdImagesImageIdMockHandler = (overrideResponse?: ProductImage | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<ProductImage> | ProductImage)) => {
  return http.put('*/products/:productId/images/:imageId', async (info) => {await delay(3000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getPutProductsProductIdImagesImageIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteProductsProductIdImagesImageIdMockHandler = (overrideResponse?: null | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<null> | null)) => {
  return http.delete('*/products/:productId/images/:imageId', async (info) => {await delay(3000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}
export const getProductImagesMock = () => [
  getGetProductsProductIdImagesMockHandler(),
  getPostProductsProductIdImagesMockHandler(),
  getPutProductsProductIdImagesImageIdMockHandler(),
  getDeleteProductsProductIdImagesImageIdMockHandler()
]
