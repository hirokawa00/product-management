/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * PIM (Product Information Management) API
 * ÂïÜÂìÅÊÉÖÂ†±ÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†„ÅÆAPIÂÆöÁæ©
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  Unit,
  UnitCreateRequest
} from '../../model';


type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




/**
 * @summary Âçò‰Ωç‰∏ÄË¶ßÂèñÂæó
 */
export type getMastersUnitsResponse200 = {
  data: Unit[]
  status: 200
}
    
export type getMastersUnitsResponseComposite = getMastersUnitsResponse200;
    
export type getMastersUnitsResponse = getMastersUnitsResponseComposite & {
  headers: Headers;
}

export const getGetMastersUnitsUrl = () => {


  

  return `/masters/units`
}

export const getMastersUnits = async ( options?: RequestInit): Promise<getMastersUnitsResponse> => {
  
  const res = await fetch(getGetMastersUnitsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getMastersUnitsResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getMastersUnitsResponse
}



export const getGetMastersUnitsQueryKey = () => {
    return [`/masters/units`] as const;
    }

    
export const getGetMastersUnitsQueryOptions = <TData = Awaited<ReturnType<typeof getMastersUnits>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMastersUnits>>, TError, TData>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMastersUnitsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMastersUnits>>> = ({ signal }) => getMastersUnits({ signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMastersUnits>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMastersUnitsQueryResult = NonNullable<Awaited<ReturnType<typeof getMastersUnits>>>
export type GetMastersUnitsQueryError = unknown


/**
 * @summary Âçò‰Ωç‰∏ÄË¶ßÂèñÂæó
 */

export function useGetMastersUnits<TData = Awaited<ReturnType<typeof getMastersUnits>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMastersUnits>>, TError, TData>, fetch?: RequestInit}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetMastersUnitsQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Âçò‰Ωç‰ΩúÊàê
 */
export type postMastersUnitsResponse201 = {
  data: Unit
  status: 201
}
    
export type postMastersUnitsResponseComposite = postMastersUnitsResponse201;
    
export type postMastersUnitsResponse = postMastersUnitsResponseComposite & {
  headers: Headers;
}

export const getPostMastersUnitsUrl = () => {


  

  return `/masters/units`
}

export const postMastersUnits = async (unitCreateRequest: UnitCreateRequest, options?: RequestInit): Promise<postMastersUnitsResponse> => {
  
  const res = await fetch(getPostMastersUnitsUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      unitCreateRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: postMastersUnitsResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as postMastersUnitsResponse
}




export const getPostMastersUnitsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMastersUnits>>, TError,{data: UnitCreateRequest}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof postMastersUnits>>, TError,{data: UnitCreateRequest}, TContext> => {

const mutationKey = ['postMastersUnits'];
const {mutation: mutationOptions, fetch: fetchOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, fetch: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMastersUnits>>, {data: UnitCreateRequest}> = (props) => {
          const {data} = props ?? {};

          return  postMastersUnits(data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMastersUnitsMutationResult = NonNullable<Awaited<ReturnType<typeof postMastersUnits>>>
    export type PostMastersUnitsMutationBody = UnitCreateRequest
    export type PostMastersUnitsMutationError = unknown

    /**
 * @summary Âçò‰Ωç‰ΩúÊàê
 */
export const usePostMastersUnits = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMastersUnits>>, TError,{data: UnitCreateRequest}, TContext>, fetch?: RequestInit}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postMastersUnits>>,
        TError,
        {data: UnitCreateRequest},
        TContext
      > => {

      const mutationOptions = getPostMastersUnitsMutationOptions(options);

      return useMutation(mutationOptions );
    }
    