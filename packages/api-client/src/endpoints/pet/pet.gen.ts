/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Swagger Petstore - OpenAPI 3.0
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
You can now help us improve the API whether it's by making changes to the definition itself or to the code.
That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

Some useful links:
- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 * OpenAPI spec version: 1.0.12
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ApiResponse,
  Error,
  FindPetsByStatusParams,
  FindPetsByTagsParams,
  Pet,
  UpdatePetWithFormParams,
  UploadFileParams
} from '../../model';


type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




export type HTTPStatusCode1xx = 100 | 101 | 102 | 103;
export type HTTPStatusCode2xx = 200 | 201 | 202 | 203 | 204 | 205 | 206 | 207;
export type HTTPStatusCode3xx = 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308;
export type HTTPStatusCode4xx = 400 | 401 | 402 | 403 | 404 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 426 | 428 | 429 | 431 | 451;
export type HTTPStatusCode5xx = 500 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
export type HTTPStatusCodes = HTTPStatusCode1xx | HTTPStatusCode2xx | HTTPStatusCode3xx | HTTPStatusCode4xx | HTTPStatusCode5xx;


/**
 * Update an existing pet by Id.
 * @summary Update an existing pet.
 */
export type updatePetResponse200 = {
  data: Pet
  status: 200
}

export type updatePetResponse400 = {
  data: null
  status: 400
}

export type updatePetResponse404 = {
  data: null
  status: 404
}

export type updatePetResponse422 = {
  data: null
  status: 422
}

export type updatePetResponseDefault = {
  data: Error
  status: Exclude<HTTPStatusCodes, 200 | 400 | 404 | 422>
}
    
export type updatePetResponseComposite = updatePetResponse200 | updatePetResponse400 | updatePetResponse404 | updatePetResponse422 | updatePetResponseDefault;
    
export type updatePetResponse = updatePetResponseComposite & {
  headers: Headers;
}

export const getUpdatePetUrl = () => {


  

  return `/pet`
}

export const updatePet = async (pet: Pet, options?: RequestInit): Promise<updatePetResponse> => {
  
  const res = await fetch(getUpdatePetUrl(),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      pet,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: updatePetResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as updatePetResponse
}




export const getUpdatePetMutationOptions = <TError = null | null | null | Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePet>>, TError,{data: Pet}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof updatePet>>, TError,{data: Pet}, TContext> => {

const mutationKey = ['updatePet'];
const {mutation: mutationOptions, fetch: fetchOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, fetch: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updatePet>>, {data: Pet}> = (props) => {
          const {data} = props ?? {};

          return  updatePet(data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdatePetMutationResult = NonNullable<Awaited<ReturnType<typeof updatePet>>>
    export type UpdatePetMutationBody = Pet
    export type UpdatePetMutationError = null | null | null | Error

    /**
 * @summary Update an existing pet.
 */
export const useUpdatePet = <TError = null | null | null | Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePet>>, TError,{data: Pet}, TContext>, fetch?: RequestInit}
 ): UseMutationResult<
        Awaited<ReturnType<typeof updatePet>>,
        TError,
        {data: Pet},
        TContext
      > => {

      const mutationOptions = getUpdatePetMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * Add a new pet to the store.
 * @summary Add a new pet to the store.
 */
export type addPetResponse200 = {
  data: Pet
  status: 200
}

export type addPetResponse400 = {
  data: null
  status: 400
}

export type addPetResponse422 = {
  data: null
  status: 422
}

export type addPetResponseDefault = {
  data: Error
  status: Exclude<HTTPStatusCodes, 200 | 400 | 422>
}
    
export type addPetResponseComposite = addPetResponse200 | addPetResponse400 | addPetResponse422 | addPetResponseDefault;
    
export type addPetResponse = addPetResponseComposite & {
  headers: Headers;
}

export const getAddPetUrl = () => {


  

  return `/pet`
}

export const addPet = async (pet: Pet, options?: RequestInit): Promise<addPetResponse> => {
  
  const res = await fetch(getAddPetUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      pet,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: addPetResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as addPetResponse
}




export const getAddPetMutationOptions = <TError = null | null | Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addPet>>, TError,{data: Pet}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof addPet>>, TError,{data: Pet}, TContext> => {

const mutationKey = ['addPet'];
const {mutation: mutationOptions, fetch: fetchOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, fetch: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addPet>>, {data: Pet}> = (props) => {
          const {data} = props ?? {};

          return  addPet(data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddPetMutationResult = NonNullable<Awaited<ReturnType<typeof addPet>>>
    export type AddPetMutationBody = Pet
    export type AddPetMutationError = null | null | Error

    /**
 * @summary Add a new pet to the store.
 */
export const useAddPet = <TError = null | null | Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addPet>>, TError,{data: Pet}, TContext>, fetch?: RequestInit}
 ): UseMutationResult<
        Awaited<ReturnType<typeof addPet>>,
        TError,
        {data: Pet},
        TContext
      > => {

      const mutationOptions = getAddPetMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * Multiple status values can be provided with comma separated strings.
 * @summary Finds Pets by status.
 */
export type findPetsByStatusResponse200 = {
  data: Pet[]
  status: 200
}

export type findPetsByStatusResponse400 = {
  data: null
  status: 400
}

export type findPetsByStatusResponseDefault = {
  data: Error
  status: Exclude<HTTPStatusCodes, 200 | 400>
}
    
export type findPetsByStatusResponseComposite = findPetsByStatusResponse200 | findPetsByStatusResponse400 | findPetsByStatusResponseDefault;
    
export type findPetsByStatusResponse = findPetsByStatusResponseComposite & {
  headers: Headers;
}

export const getFindPetsByStatusUrl = (params?: FindPetsByStatusParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/pet/findByStatus?${stringifiedParams}` : `/pet/findByStatus`
}

export const findPetsByStatus = async (params?: FindPetsByStatusParams, options?: RequestInit): Promise<findPetsByStatusResponse> => {
  
  const res = await fetch(getFindPetsByStatusUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: findPetsByStatusResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as findPetsByStatusResponse
}



export const getFindPetsByStatusQueryKey = (params?: FindPetsByStatusParams,) => {
    return [`/pet/findByStatus`, ...(params ? [params]: [])] as const;
    }

    
export const getFindPetsByStatusQueryOptions = <TData = Awaited<ReturnType<typeof findPetsByStatus>>, TError = null | Error>(params?: FindPetsByStatusParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findPetsByStatus>>, TError, TData>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindPetsByStatusQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findPetsByStatus>>> = ({ signal }) => findPetsByStatus(params, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findPetsByStatus>>, TError, TData> & { queryKey: QueryKey }
}

export type FindPetsByStatusQueryResult = NonNullable<Awaited<ReturnType<typeof findPetsByStatus>>>
export type FindPetsByStatusQueryError = null | Error


/**
 * @summary Finds Pets by status.
 */

export function useFindPetsByStatus<TData = Awaited<ReturnType<typeof findPetsByStatus>>, TError = null | Error>(
 params?: FindPetsByStatusParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findPetsByStatus>>, TError, TData>, fetch?: RequestInit}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getFindPetsByStatusQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
 * @summary Finds Pets by tags.
 */
export type findPetsByTagsResponse200 = {
  data: Pet[]
  status: 200
}

export type findPetsByTagsResponse400 = {
  data: null
  status: 400
}

export type findPetsByTagsResponseDefault = {
  data: Error
  status: Exclude<HTTPStatusCodes, 200 | 400>
}
    
export type findPetsByTagsResponseComposite = findPetsByTagsResponse200 | findPetsByTagsResponse400 | findPetsByTagsResponseDefault;
    
export type findPetsByTagsResponse = findPetsByTagsResponseComposite & {
  headers: Headers;
}

export const getFindPetsByTagsUrl = (params?: FindPetsByTagsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    const explodeParameters = ["tags"];

    if (Array.isArray(value) && explodeParameters.includes(key)) {
      value.forEach((v) => normalizedParams.append(key, v === null ? 'null' : v.toString()));
      return;
    }
      
    
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/pet/findByTags?${stringifiedParams}` : `/pet/findByTags`
}

export const findPetsByTags = async (params?: FindPetsByTagsParams, options?: RequestInit): Promise<findPetsByTagsResponse> => {
  
  const res = await fetch(getFindPetsByTagsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: findPetsByTagsResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as findPetsByTagsResponse
}



export const getFindPetsByTagsQueryKey = (params?: FindPetsByTagsParams,) => {
    return [`/pet/findByTags`, ...(params ? [params]: [])] as const;
    }

    
export const getFindPetsByTagsQueryOptions = <TData = Awaited<ReturnType<typeof findPetsByTags>>, TError = null | Error>(params?: FindPetsByTagsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findPetsByTags>>, TError, TData>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindPetsByTagsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findPetsByTags>>> = ({ signal }) => findPetsByTags(params, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findPetsByTags>>, TError, TData> & { queryKey: QueryKey }
}

export type FindPetsByTagsQueryResult = NonNullable<Awaited<ReturnType<typeof findPetsByTags>>>
export type FindPetsByTagsQueryError = null | Error


/**
 * @summary Finds Pets by tags.
 */

export function useFindPetsByTags<TData = Awaited<ReturnType<typeof findPetsByTags>>, TError = null | Error>(
 params?: FindPetsByTagsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof findPetsByTags>>, TError, TData>, fetch?: RequestInit}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getFindPetsByTagsQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Returns a single pet.
 * @summary Find pet by ID.
 */
export type getPetByIdResponse200 = {
  data: Pet
  status: 200
}

export type getPetByIdResponse400 = {
  data: null
  status: 400
}

export type getPetByIdResponse404 = {
  data: null
  status: 404
}

export type getPetByIdResponseDefault = {
  data: Error
  status: Exclude<HTTPStatusCodes, 200 | 400 | 404>
}
    
export type getPetByIdResponseComposite = getPetByIdResponse200 | getPetByIdResponse400 | getPetByIdResponse404 | getPetByIdResponseDefault;
    
export type getPetByIdResponse = getPetByIdResponseComposite & {
  headers: Headers;
}

export const getGetPetByIdUrl = (petId: number,) => {


  

  return `/pet/${petId}`
}

export const getPetById = async (petId: number, options?: RequestInit): Promise<getPetByIdResponse> => {
  
  const res = await fetch(getGetPetByIdUrl(petId),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getPetByIdResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getPetByIdResponse
}



export const getGetPetByIdQueryKey = (petId?: number,) => {
    return [`/pet/${petId}`] as const;
    }

    
export const getGetPetByIdQueryOptions = <TData = Awaited<ReturnType<typeof getPetById>>, TError = null | null | Error>(petId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getPetById>>, TError, TData>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPetByIdQueryKey(petId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPetById>>> = ({ signal }) => getPetById(petId, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(petId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPetById>>, TError, TData> & { queryKey: QueryKey }
}

export type GetPetByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getPetById>>>
export type GetPetByIdQueryError = null | null | Error


/**
 * @summary Find pet by ID.
 */

export function useGetPetById<TData = Awaited<ReturnType<typeof getPetById>>, TError = null | null | Error>(
 petId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getPetById>>, TError, TData>, fetch?: RequestInit}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetPetByIdQueryOptions(petId,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Updates a pet resource based on the form data.
 * @summary Updates a pet in the store with form data.
 */
export type updatePetWithFormResponse200 = {
  data: Pet
  status: 200
}

export type updatePetWithFormResponse400 = {
  data: null
  status: 400
}

export type updatePetWithFormResponseDefault = {
  data: Error
  status: Exclude<HTTPStatusCodes, 200 | 400>
}
    
export type updatePetWithFormResponseComposite = updatePetWithFormResponse200 | updatePetWithFormResponse400 | updatePetWithFormResponseDefault;
    
export type updatePetWithFormResponse = updatePetWithFormResponseComposite & {
  headers: Headers;
}

export const getUpdatePetWithFormUrl = (petId: number,
    params?: UpdatePetWithFormParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/pet/${petId}?${stringifiedParams}` : `/pet/${petId}`
}

export const updatePetWithForm = async (petId: number,
    params?: UpdatePetWithFormParams, options?: RequestInit): Promise<updatePetWithFormResponse> => {
  
  const res = await fetch(getUpdatePetWithFormUrl(petId,params),
  {      
    ...options,
    method: 'POST'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: updatePetWithFormResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as updatePetWithFormResponse
}




export const getUpdatePetWithFormMutationOptions = <TError = null | Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePetWithForm>>, TError,{petId: number;params?: UpdatePetWithFormParams}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof updatePetWithForm>>, TError,{petId: number;params?: UpdatePetWithFormParams}, TContext> => {

const mutationKey = ['updatePetWithForm'];
const {mutation: mutationOptions, fetch: fetchOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, fetch: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updatePetWithForm>>, {petId: number;params?: UpdatePetWithFormParams}> = (props) => {
          const {petId,params} = props ?? {};

          return  updatePetWithForm(petId,params,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdatePetWithFormMutationResult = NonNullable<Awaited<ReturnType<typeof updatePetWithForm>>>
    
    export type UpdatePetWithFormMutationError = null | Error

    /**
 * @summary Updates a pet in the store with form data.
 */
export const useUpdatePetWithForm = <TError = null | Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePetWithForm>>, TError,{petId: number;params?: UpdatePetWithFormParams}, TContext>, fetch?: RequestInit}
 ): UseMutationResult<
        Awaited<ReturnType<typeof updatePetWithForm>>,
        TError,
        {petId: number;params?: UpdatePetWithFormParams},
        TContext
      > => {

      const mutationOptions = getUpdatePetWithFormMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * Delete a pet.
 * @summary Deletes a pet.
 */
export type deletePetResponse200 = {
  data: null
  status: 200
}

export type deletePetResponse400 = {
  data: null
  status: 400
}

export type deletePetResponseDefault = {
  data: Error
  status: Exclude<HTTPStatusCodes, 200 | 400>
}
    
export type deletePetResponseComposite = deletePetResponse200 | deletePetResponse400 | deletePetResponseDefault;
    
export type deletePetResponse = deletePetResponseComposite & {
  headers: Headers;
}

export const getDeletePetUrl = (petId: number,) => {


  

  return `/pet/${petId}`
}

export const deletePet = async (petId: number, options?: RequestInit): Promise<deletePetResponse> => {
  
  const res = await fetch(getDeletePetUrl(petId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: deletePetResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as deletePetResponse
}




export const getDeletePetMutationOptions = <TError = null | Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePet>>, TError,{petId: number}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof deletePet>>, TError,{petId: number}, TContext> => {

const mutationKey = ['deletePet'];
const {mutation: mutationOptions, fetch: fetchOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, fetch: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletePet>>, {petId: number}> = (props) => {
          const {petId} = props ?? {};

          return  deletePet(petId,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeletePetMutationResult = NonNullable<Awaited<ReturnType<typeof deletePet>>>
    
    export type DeletePetMutationError = null | Error

    /**
 * @summary Deletes a pet.
 */
export const useDeletePet = <TError = null | Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePet>>, TError,{petId: number}, TContext>, fetch?: RequestInit}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deletePet>>,
        TError,
        {petId: number},
        TContext
      > => {

      const mutationOptions = getDeletePetMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * Upload image of the pet.
 * @summary Uploads an image.
 */
export type uploadFileResponse200 = {
  data: ApiResponse
  status: 200
}

export type uploadFileResponse400 = {
  data: null
  status: 400
}

export type uploadFileResponse404 = {
  data: null
  status: 404
}

export type uploadFileResponseDefault = {
  data: Error
  status: Exclude<HTTPStatusCodes, 200 | 400 | 404>
}
    
export type uploadFileResponseComposite = uploadFileResponse200 | uploadFileResponse400 | uploadFileResponse404 | uploadFileResponseDefault;
    
export type uploadFileResponse = uploadFileResponseComposite & {
  headers: Headers;
}

export const getUploadFileUrl = (petId: number,
    params?: UploadFileParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/pet/${petId}/uploadImage?${stringifiedParams}` : `/pet/${petId}/uploadImage`
}

export const uploadFile = async (petId: number,
    uploadFileBody: Blob,
    params?: UploadFileParams, options?: RequestInit): Promise<uploadFileResponse> => {
  
  const res = await fetch(getUploadFileUrl(petId,params),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/octet-stream', ...options?.headers },
    body: JSON.stringify(
      uploadFileBody,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: uploadFileResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as uploadFileResponse
}




export const getUploadFileMutationOptions = <TError = null | null | Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof uploadFile>>, TError,{petId: number;data: Blob;params?: UploadFileParams}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof uploadFile>>, TError,{petId: number;data: Blob;params?: UploadFileParams}, TContext> => {

const mutationKey = ['uploadFile'];
const {mutation: mutationOptions, fetch: fetchOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, fetch: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof uploadFile>>, {petId: number;data: Blob;params?: UploadFileParams}> = (props) => {
          const {petId,data,params} = props ?? {};

          return  uploadFile(petId,data,params,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UploadFileMutationResult = NonNullable<Awaited<ReturnType<typeof uploadFile>>>
    export type UploadFileMutationBody = Blob
    export type UploadFileMutationError = null | null | Error

    /**
 * @summary Uploads an image.
 */
export const useUploadFile = <TError = null | null | Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof uploadFile>>, TError,{petId: number;data: Blob;params?: UploadFileParams}, TContext>, fetch?: RequestInit}
 ): UseMutationResult<
        Awaited<ReturnType<typeof uploadFile>>,
        TError,
        {petId: number;data: Blob;params?: UploadFileParams},
        TContext
      > => {

      const mutationOptions = getUploadFileMutationOptions(options);

      return useMutation(mutationOptions );
    }
    