/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * PIM (Product Information Management) API
 * ÂïÜÂìÅÊÉÖÂ†±ÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†„ÅÆAPIÂÆöÁæ©
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  Category,
  CategoryCreateRequest,
  CategoryUpdateRequest
} from '../../model';


type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




/**
 * @summary „Ç´„ÉÜ„Ç¥„É™‰∏ÄË¶ßÂèñÂæó
 */
export type getMastersCategoriesResponse200 = {
  data: Category[]
  status: 200
}
    
export type getMastersCategoriesResponseComposite = getMastersCategoriesResponse200;
    
export type getMastersCategoriesResponse = getMastersCategoriesResponseComposite & {
  headers: Headers;
}

export const getGetMastersCategoriesUrl = () => {


  

  return `/masters/categories`
}

export const getMastersCategories = async ( options?: RequestInit): Promise<getMastersCategoriesResponse> => {
  
  const res = await fetch(getGetMastersCategoriesUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getMastersCategoriesResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getMastersCategoriesResponse
}



export const getGetMastersCategoriesQueryKey = () => {
    return [`/masters/categories`] as const;
    }

    
export const getGetMastersCategoriesQueryOptions = <TData = Awaited<ReturnType<typeof getMastersCategories>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMastersCategories>>, TError, TData>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMastersCategoriesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMastersCategories>>> = ({ signal }) => getMastersCategories({ signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMastersCategories>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMastersCategoriesQueryResult = NonNullable<Awaited<ReturnType<typeof getMastersCategories>>>
export type GetMastersCategoriesQueryError = unknown


/**
 * @summary „Ç´„ÉÜ„Ç¥„É™‰∏ÄË¶ßÂèñÂæó
 */

export function useGetMastersCategories<TData = Awaited<ReturnType<typeof getMastersCategories>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMastersCategories>>, TError, TData>, fetch?: RequestInit}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetMastersCategoriesQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary „Ç´„ÉÜ„Ç¥„É™‰ΩúÊàê
 */
export type postMastersCategoriesResponse201 = {
  data: Category
  status: 201
}
    
export type postMastersCategoriesResponseComposite = postMastersCategoriesResponse201;
    
export type postMastersCategoriesResponse = postMastersCategoriesResponseComposite & {
  headers: Headers;
}

export const getPostMastersCategoriesUrl = () => {


  

  return `/masters/categories`
}

export const postMastersCategories = async (categoryCreateRequest: CategoryCreateRequest, options?: RequestInit): Promise<postMastersCategoriesResponse> => {
  
  const res = await fetch(getPostMastersCategoriesUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      categoryCreateRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: postMastersCategoriesResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as postMastersCategoriesResponse
}




export const getPostMastersCategoriesMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMastersCategories>>, TError,{data: CategoryCreateRequest}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof postMastersCategories>>, TError,{data: CategoryCreateRequest}, TContext> => {

const mutationKey = ['postMastersCategories'];
const {mutation: mutationOptions, fetch: fetchOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, fetch: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMastersCategories>>, {data: CategoryCreateRequest}> = (props) => {
          const {data} = props ?? {};

          return  postMastersCategories(data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostMastersCategoriesMutationResult = NonNullable<Awaited<ReturnType<typeof postMastersCategories>>>
    export type PostMastersCategoriesMutationBody = CategoryCreateRequest
    export type PostMastersCategoriesMutationError = unknown

    /**
 * @summary „Ç´„ÉÜ„Ç¥„É™‰ΩúÊàê
 */
export const usePostMastersCategories = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMastersCategories>>, TError,{data: CategoryCreateRequest}, TContext>, fetch?: RequestInit}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postMastersCategories>>,
        TError,
        {data: CategoryCreateRequest},
        TContext
      > => {

      const mutationOptions = getPostMastersCategoriesMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary „Ç´„ÉÜ„Ç¥„É™Ë©≥Á¥∞ÂèñÂæó
 */
export type getMastersCategoriesCategoryIdResponse200 = {
  data: Category
  status: 200
}
    
export type getMastersCategoriesCategoryIdResponseComposite = getMastersCategoriesCategoryIdResponse200;
    
export type getMastersCategoriesCategoryIdResponse = getMastersCategoriesCategoryIdResponseComposite & {
  headers: Headers;
}

export const getGetMastersCategoriesCategoryIdUrl = (categoryId: string,) => {


  

  return `/masters/categories/${categoryId}`
}

export const getMastersCategoriesCategoryId = async (categoryId: string, options?: RequestInit): Promise<getMastersCategoriesCategoryIdResponse> => {
  
  const res = await fetch(getGetMastersCategoriesCategoryIdUrl(categoryId),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getMastersCategoriesCategoryIdResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getMastersCategoriesCategoryIdResponse
}



export const getGetMastersCategoriesCategoryIdQueryKey = (categoryId?: string,) => {
    return [`/masters/categories/${categoryId}`] as const;
    }

    
export const getGetMastersCategoriesCategoryIdQueryOptions = <TData = Awaited<ReturnType<typeof getMastersCategoriesCategoryId>>, TError = unknown>(categoryId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMastersCategoriesCategoryId>>, TError, TData>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMastersCategoriesCategoryIdQueryKey(categoryId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMastersCategoriesCategoryId>>> = ({ signal }) => getMastersCategoriesCategoryId(categoryId, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(categoryId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMastersCategoriesCategoryId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMastersCategoriesCategoryIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMastersCategoriesCategoryId>>>
export type GetMastersCategoriesCategoryIdQueryError = unknown


/**
 * @summary „Ç´„ÉÜ„Ç¥„É™Ë©≥Á¥∞ÂèñÂæó
 */

export function useGetMastersCategoriesCategoryId<TData = Awaited<ReturnType<typeof getMastersCategoriesCategoryId>>, TError = unknown>(
 categoryId: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMastersCategoriesCategoryId>>, TError, TData>, fetch?: RequestInit}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetMastersCategoriesCategoryIdQueryOptions(categoryId,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary „Ç´„ÉÜ„Ç¥„É™Êõ¥Êñ∞
 */
export type putMastersCategoriesCategoryIdResponse200 = {
  data: Category
  status: 200
}
    
export type putMastersCategoriesCategoryIdResponseComposite = putMastersCategoriesCategoryIdResponse200;
    
export type putMastersCategoriesCategoryIdResponse = putMastersCategoriesCategoryIdResponseComposite & {
  headers: Headers;
}

export const getPutMastersCategoriesCategoryIdUrl = (categoryId: string,) => {


  

  return `/masters/categories/${categoryId}`
}

export const putMastersCategoriesCategoryId = async (categoryId: string,
    categoryUpdateRequest: CategoryUpdateRequest, options?: RequestInit): Promise<putMastersCategoriesCategoryIdResponse> => {
  
  const res = await fetch(getPutMastersCategoriesCategoryIdUrl(categoryId),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      categoryUpdateRequest,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: putMastersCategoriesCategoryIdResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as putMastersCategoriesCategoryIdResponse
}




export const getPutMastersCategoriesCategoryIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMastersCategoriesCategoryId>>, TError,{categoryId: string;data: CategoryUpdateRequest}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof putMastersCategoriesCategoryId>>, TError,{categoryId: string;data: CategoryUpdateRequest}, TContext> => {

const mutationKey = ['putMastersCategoriesCategoryId'];
const {mutation: mutationOptions, fetch: fetchOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, fetch: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putMastersCategoriesCategoryId>>, {categoryId: string;data: CategoryUpdateRequest}> = (props) => {
          const {categoryId,data} = props ?? {};

          return  putMastersCategoriesCategoryId(categoryId,data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutMastersCategoriesCategoryIdMutationResult = NonNullable<Awaited<ReturnType<typeof putMastersCategoriesCategoryId>>>
    export type PutMastersCategoriesCategoryIdMutationBody = CategoryUpdateRequest
    export type PutMastersCategoriesCategoryIdMutationError = unknown

    /**
 * @summary „Ç´„ÉÜ„Ç¥„É™Êõ¥Êñ∞
 */
export const usePutMastersCategoriesCategoryId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMastersCategoriesCategoryId>>, TError,{categoryId: string;data: CategoryUpdateRequest}, TContext>, fetch?: RequestInit}
 ): UseMutationResult<
        Awaited<ReturnType<typeof putMastersCategoriesCategoryId>>,
        TError,
        {categoryId: string;data: CategoryUpdateRequest},
        TContext
      > => {

      const mutationOptions = getPutMastersCategoriesCategoryIdMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary „Ç´„ÉÜ„Ç¥„É™ÂâäÈô§
 */
export type deleteMastersCategoriesCategoryIdResponse204 = {
  data: null
  status: 204
}
    
export type deleteMastersCategoriesCategoryIdResponseComposite = deleteMastersCategoriesCategoryIdResponse204;
    
export type deleteMastersCategoriesCategoryIdResponse = deleteMastersCategoriesCategoryIdResponseComposite & {
  headers: Headers;
}

export const getDeleteMastersCategoriesCategoryIdUrl = (categoryId: string,) => {


  

  return `/masters/categories/${categoryId}`
}

export const deleteMastersCategoriesCategoryId = async (categoryId: string, options?: RequestInit): Promise<deleteMastersCategoriesCategoryIdResponse> => {
  
  const res = await fetch(getDeleteMastersCategoriesCategoryIdUrl(categoryId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: deleteMastersCategoriesCategoryIdResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as deleteMastersCategoriesCategoryIdResponse
}




export const getDeleteMastersCategoriesCategoryIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMastersCategoriesCategoryId>>, TError,{categoryId: string}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMastersCategoriesCategoryId>>, TError,{categoryId: string}, TContext> => {

const mutationKey = ['deleteMastersCategoriesCategoryId'];
const {mutation: mutationOptions, fetch: fetchOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, fetch: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMastersCategoriesCategoryId>>, {categoryId: string}> = (props) => {
          const {categoryId} = props ?? {};

          return  deleteMastersCategoriesCategoryId(categoryId,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteMastersCategoriesCategoryIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMastersCategoriesCategoryId>>>
    
    export type DeleteMastersCategoriesCategoryIdMutationError = unknown

    /**
 * @summary „Ç´„ÉÜ„Ç¥„É™ÂâäÈô§
 */
export const useDeleteMastersCategoriesCategoryId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMastersCategoriesCategoryId>>, TError,{categoryId: string}, TContext>, fetch?: RequestInit}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteMastersCategoriesCategoryId>>,
        TError,
        {categoryId: string},
        TContext
      > => {

      const mutationOptions = getDeleteMastersCategoriesCategoryIdMutationOptions(options);

      return useMutation(mutationOptions );
    }
    