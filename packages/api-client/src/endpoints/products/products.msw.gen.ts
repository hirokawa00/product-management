/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * PIM (Product Information Management) API
 * 商品情報管理システムのAPI定義
 * OpenAPI spec version: 1.0.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import {
  ImageType,
  ProductStatus
} from '../../model';
import type {
  GetProducts200,
  Product
} from '../../model';


export const getGetProductsResponseMock = (overrideResponse: Partial< GetProducts200 > = {}): GetProducts200 => ({data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 0, max: 100 }) }, (_, i) => i + 1).map(() => ({product_id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), product_code: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), jan_code: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), basic_info: faker.helpers.arrayElement([{name: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), name_kana: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), short_description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), category_id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), brand_id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), manufacturer: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), model_number: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), price: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined]), currency: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), tax_rate: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined]), keywords: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 0, max: 100 }) }, (_, i) => i + 1).map(() => (faker.string.alpha({length: {min: 10, max: 20}}))), undefined])}, undefined]), physical_properties: faker.helpers.arrayElement([{dimensions: faker.helpers.arrayElement([{length: faker.helpers.arrayElement([{value: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined]), unit_id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined])}, undefined]), width: faker.helpers.arrayElement([{value: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined]), unit_id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined])}, undefined]), height: faker.helpers.arrayElement([{value: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined]), unit_id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined])}, undefined])}, undefined]), weight: faker.helpers.arrayElement([{value: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined]), unit_id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined])}, undefined]), volume: faker.helpers.arrayElement([{value: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined]), unit_id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined])}, undefined]), color: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), material: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), origin_country: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), shelf_life: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), storage_conditions: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), handling_precautions: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), custom_properties: faker.helpers.arrayElement([{}, undefined])}, undefined]), images: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 0, max: 100 }) }, (_, i) => i + 1).map(() => ({image_id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), product_id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), image_type: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ImageType)), undefined]), file_name: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), file_size: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mime_type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), url: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), alt_text: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), display_order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), is_primary: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), created_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updated_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), status: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ProductStatus)), undefined]), created_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updated_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), created_by: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), updated_by: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined])})), undefined]), pagination: faker.helpers.arrayElement([{current_page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), per_page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), total_pages: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), total_count: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), has_next: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), has_prev: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined]), ...overrideResponse})

export const getPostProductsResponseMock = (overrideResponse: Partial< Product > = {}): Product => ({product_id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), product_code: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), jan_code: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), basic_info: faker.helpers.arrayElement([{name: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), name_kana: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), short_description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), category_id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), brand_id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), manufacturer: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), model_number: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), price: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined]), currency: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), tax_rate: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined]), keywords: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 0, max: 100 }) }, (_, i) => i + 1).map(() => (faker.string.alpha({length: {min: 10, max: 20}}))), undefined])}, undefined]), physical_properties: faker.helpers.arrayElement([{dimensions: faker.helpers.arrayElement([{length: faker.helpers.arrayElement([{value: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined]), unit_id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined])}, undefined]), width: faker.helpers.arrayElement([{value: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined]), unit_id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined])}, undefined]), height: faker.helpers.arrayElement([{value: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined]), unit_id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined])}, undefined])}, undefined]), weight: faker.helpers.arrayElement([{value: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined]), unit_id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined])}, undefined]), volume: faker.helpers.arrayElement([{value: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined]), unit_id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined])}, undefined]), color: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), material: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), origin_country: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), shelf_life: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), storage_conditions: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), handling_precautions: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), custom_properties: faker.helpers.arrayElement([{}, undefined])}, undefined]), images: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 0, max: 100 }) }, (_, i) => i + 1).map(() => ({image_id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), product_id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), image_type: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ImageType)), undefined]), file_name: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), file_size: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mime_type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), url: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), alt_text: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), display_order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), is_primary: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), created_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updated_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), status: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ProductStatus)), undefined]), created_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updated_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), created_by: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), updated_by: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), ...overrideResponse})

export const getGetProductsProductIdResponseMock = (overrideResponse: Partial< Product > = {}): Product => ({product_id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), product_code: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), jan_code: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), basic_info: faker.helpers.arrayElement([{name: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), name_kana: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), short_description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), category_id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), brand_id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), manufacturer: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), model_number: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), price: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined]), currency: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), tax_rate: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined]), keywords: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 0, max: 100 }) }, (_, i) => i + 1).map(() => (faker.string.alpha({length: {min: 10, max: 20}}))), undefined])}, undefined]), physical_properties: faker.helpers.arrayElement([{dimensions: faker.helpers.arrayElement([{length: faker.helpers.arrayElement([{value: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined]), unit_id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined])}, undefined]), width: faker.helpers.arrayElement([{value: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined]), unit_id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined])}, undefined]), height: faker.helpers.arrayElement([{value: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined]), unit_id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined])}, undefined])}, undefined]), weight: faker.helpers.arrayElement([{value: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined]), unit_id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined])}, undefined]), volume: faker.helpers.arrayElement([{value: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined]), unit_id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined])}, undefined]), color: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), material: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), origin_country: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), shelf_life: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), storage_conditions: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), handling_precautions: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), custom_properties: faker.helpers.arrayElement([{}, undefined])}, undefined]), images: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 0, max: 100 }) }, (_, i) => i + 1).map(() => ({image_id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), product_id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), image_type: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ImageType)), undefined]), file_name: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), file_size: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mime_type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), url: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), alt_text: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), display_order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), is_primary: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), created_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updated_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), status: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ProductStatus)), undefined]), created_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updated_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), created_by: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), updated_by: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), ...overrideResponse})

export const getPutProductsProductIdResponseMock = (overrideResponse: Partial< Product > = {}): Product => ({product_id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), product_code: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), jan_code: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), basic_info: faker.helpers.arrayElement([{name: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), name_kana: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), short_description: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), category_id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), brand_id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), manufacturer: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), model_number: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), price: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined]), currency: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), tax_rate: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined]), keywords: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 0, max: 100 }) }, (_, i) => i + 1).map(() => (faker.string.alpha({length: {min: 10, max: 20}}))), undefined])}, undefined]), physical_properties: faker.helpers.arrayElement([{dimensions: faker.helpers.arrayElement([{length: faker.helpers.arrayElement([{value: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined]), unit_id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined])}, undefined]), width: faker.helpers.arrayElement([{value: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined]), unit_id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined])}, undefined]), height: faker.helpers.arrayElement([{value: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined]), unit_id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined])}, undefined])}, undefined]), weight: faker.helpers.arrayElement([{value: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined]), unit_id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined])}, undefined]), volume: faker.helpers.arrayElement([{value: faker.helpers.arrayElement([faker.number.float({min: undefined, max: undefined, fractionDigits: 2}), undefined]), unit_id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined])}, undefined]), color: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), material: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), origin_country: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), shelf_life: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), storage_conditions: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), handling_precautions: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), custom_properties: faker.helpers.arrayElement([{}, undefined])}, undefined]), images: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 0, max: 100 }) }, (_, i) => i + 1).map(() => ({image_id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), product_id: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), image_type: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ImageType)), undefined]), file_name: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), file_size: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mime_type: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), url: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), alt_text: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), display_order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), is_primary: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), created_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updated_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), status: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(ProductStatus)), undefined]), created_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), updated_at: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), created_by: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), updated_by: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), ...overrideResponse})


export const getGetProductsMockHandler = (overrideResponse?: GetProducts200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetProducts200> | GetProducts200)) => {
  return http.get('*/products', async (info) => {await delay(3000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetProductsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostProductsMockHandler = (overrideResponse?: Product | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Product> | Product)) => {
  return http.post('*/products', async (info) => {await delay(3000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getPostProductsResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetProductsProductIdMockHandler = (overrideResponse?: Product | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Product> | Product)) => {
  return http.get('*/products/:productId', async (info) => {await delay(3000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetProductsProductIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPutProductsProductIdMockHandler = (overrideResponse?: Product | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<Product> | Product)) => {
  return http.put('*/products/:productId', async (info) => {await delay(3000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getPutProductsProductIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteProductsProductIdMockHandler = (overrideResponse?: null | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<null> | null)) => {
  return http.delete('*/products/:productId', async (info) => {await delay(3000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}
export const getProductsMock = () => [
  getGetProductsMockHandler(),
  getPostProductsMockHandler(),
  getGetProductsProductIdMockHandler(),
  getPutProductsProductIdMockHandler(),
  getDeleteProductsProductIdMockHandler()
]
