/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Swagger Petstore - OpenAPI 3.0
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
You can now help us improve the API whether it's by making changes to the definition itself or to the code.
That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

Some useful links:
- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 * OpenAPI spec version: 1.0.12
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  Error,
  GetInventory200,
  Order
} from '../../model';


type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;




export type HTTPStatusCode1xx = 100 | 101 | 102 | 103;
export type HTTPStatusCode2xx = 200 | 201 | 202 | 203 | 204 | 205 | 206 | 207;
export type HTTPStatusCode3xx = 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308;
export type HTTPStatusCode4xx = 400 | 401 | 402 | 403 | 404 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 419 | 420 | 421 | 422 | 423 | 424 | 426 | 428 | 429 | 431 | 451;
export type HTTPStatusCode5xx = 500 | 501 | 502 | 503 | 504 | 505 | 507 | 511;
export type HTTPStatusCodes = HTTPStatusCode1xx | HTTPStatusCode2xx | HTTPStatusCode3xx | HTTPStatusCode4xx | HTTPStatusCode5xx;


/**
 * Returns a map of status codes to quantities.
 * @summary Returns pet inventories by status.
 */
export type getInventoryResponse200 = {
  data: GetInventory200
  status: 200
}

export type getInventoryResponseDefault = {
  data: Error
  status: Exclude<HTTPStatusCodes, 200>
}
    
export type getInventoryResponseComposite = getInventoryResponse200 | getInventoryResponseDefault;
    
export type getInventoryResponse = getInventoryResponseComposite & {
  headers: Headers;
}

export const getGetInventoryUrl = () => {


  

  return `/store/inventory`
}

export const getInventory = async ( options?: RequestInit): Promise<getInventoryResponse> => {
  
  const res = await fetch(getGetInventoryUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getInventoryResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getInventoryResponse
}



export const getGetInventoryQueryKey = () => {
    return [`/store/inventory`] as const;
    }

    
export const getGetInventoryQueryOptions = <TData = Awaited<ReturnType<typeof getInventory>>, TError = Error>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getInventory>>, TError, TData>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetInventoryQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getInventory>>> = ({ signal }) => getInventory({ signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getInventory>>, TError, TData> & { queryKey: QueryKey }
}

export type GetInventoryQueryResult = NonNullable<Awaited<ReturnType<typeof getInventory>>>
export type GetInventoryQueryError = Error


/**
 * @summary Returns pet inventories by status.
 */

export function useGetInventory<TData = Awaited<ReturnType<typeof getInventory>>, TError = Error>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getInventory>>, TError, TData>, fetch?: RequestInit}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetInventoryQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Place a new order in the store.
 * @summary Place an order for a pet.
 */
export type placeOrderResponse200 = {
  data: Order
  status: 200
}

export type placeOrderResponse400 = {
  data: null
  status: 400
}

export type placeOrderResponse422 = {
  data: null
  status: 422
}

export type placeOrderResponseDefault = {
  data: Error
  status: Exclude<HTTPStatusCodes, 200 | 400 | 422>
}
    
export type placeOrderResponseComposite = placeOrderResponse200 | placeOrderResponse400 | placeOrderResponse422 | placeOrderResponseDefault;
    
export type placeOrderResponse = placeOrderResponseComposite & {
  headers: Headers;
}

export const getPlaceOrderUrl = () => {


  

  return `/store/order`
}

export const placeOrder = async (order: Order, options?: RequestInit): Promise<placeOrderResponse> => {
  
  const res = await fetch(getPlaceOrderUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      order,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: placeOrderResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as placeOrderResponse
}




export const getPlaceOrderMutationOptions = <TError = null | null | Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeOrder>>, TError,{data: Order}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof placeOrder>>, TError,{data: Order}, TContext> => {

const mutationKey = ['placeOrder'];
const {mutation: mutationOptions, fetch: fetchOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, fetch: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof placeOrder>>, {data: Order}> = (props) => {
          const {data} = props ?? {};

          return  placeOrder(data,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PlaceOrderMutationResult = NonNullable<Awaited<ReturnType<typeof placeOrder>>>
    export type PlaceOrderMutationBody = Order
    export type PlaceOrderMutationError = null | null | Error

    /**
 * @summary Place an order for a pet.
 */
export const usePlaceOrder = <TError = null | null | Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof placeOrder>>, TError,{data: Order}, TContext>, fetch?: RequestInit}
 ): UseMutationResult<
        Awaited<ReturnType<typeof placeOrder>>,
        TError,
        {data: Order},
        TContext
      > => {

      const mutationOptions = getPlaceOrderMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
 * @summary Find purchase order by ID.
 */
export type getOrderByIdResponse200 = {
  data: Order
  status: 200
}

export type getOrderByIdResponse400 = {
  data: null
  status: 400
}

export type getOrderByIdResponse404 = {
  data: null
  status: 404
}

export type getOrderByIdResponseDefault = {
  data: Error
  status: Exclude<HTTPStatusCodes, 200 | 400 | 404>
}
    
export type getOrderByIdResponseComposite = getOrderByIdResponse200 | getOrderByIdResponse400 | getOrderByIdResponse404 | getOrderByIdResponseDefault;
    
export type getOrderByIdResponse = getOrderByIdResponseComposite & {
  headers: Headers;
}

export const getGetOrderByIdUrl = (orderId: number,) => {


  

  return `/store/order/${orderId}`
}

export const getOrderById = async (orderId: number, options?: RequestInit): Promise<getOrderByIdResponse> => {
  
  const res = await fetch(getGetOrderByIdUrl(orderId),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getOrderByIdResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getOrderByIdResponse
}



export const getGetOrderByIdQueryKey = (orderId?: number,) => {
    return [`/store/order/${orderId}`] as const;
    }

    
export const getGetOrderByIdQueryOptions = <TData = Awaited<ReturnType<typeof getOrderById>>, TError = null | null | Error>(orderId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData>, fetch?: RequestInit}
) => {

const {query: queryOptions, fetch: fetchOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOrderByIdQueryKey(orderId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrderById>>> = ({ signal }) => getOrderById(orderId, { signal, ...fetchOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(orderId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData> & { queryKey: QueryKey }
}

export type GetOrderByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getOrderById>>>
export type GetOrderByIdQueryError = null | null | Error


/**
 * @summary Find purchase order by ID.
 */

export function useGetOrderById<TData = Awaited<ReturnType<typeof getOrderById>>, TError = null | null | Error>(
 orderId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getOrderById>>, TError, TData>, fetch?: RequestInit}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetOrderByIdQueryOptions(orderId,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors.
 * @summary Delete purchase order by identifier.
 */
export type deleteOrderResponse200 = {
  data: null
  status: 200
}

export type deleteOrderResponse400 = {
  data: null
  status: 400
}

export type deleteOrderResponse404 = {
  data: null
  status: 404
}

export type deleteOrderResponseDefault = {
  data: Error
  status: Exclude<HTTPStatusCodes, 200 | 400 | 404>
}
    
export type deleteOrderResponseComposite = deleteOrderResponse200 | deleteOrderResponse400 | deleteOrderResponse404 | deleteOrderResponseDefault;
    
export type deleteOrderResponse = deleteOrderResponseComposite & {
  headers: Headers;
}

export const getDeleteOrderUrl = (orderId: number,) => {


  

  return `/store/order/${orderId}`
}

export const deleteOrder = async (orderId: number, options?: RequestInit): Promise<deleteOrderResponse> => {
  
  const res = await fetch(getDeleteOrderUrl(orderId),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: deleteOrderResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as deleteOrderResponse
}




export const getDeleteOrderMutationOptions = <TError = null | null | Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOrder>>, TError,{orderId: number}, TContext>, fetch?: RequestInit}
): UseMutationOptions<Awaited<ReturnType<typeof deleteOrder>>, TError,{orderId: number}, TContext> => {

const mutationKey = ['deleteOrder'];
const {mutation: mutationOptions, fetch: fetchOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, fetch: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteOrder>>, {orderId: number}> = (props) => {
          const {orderId} = props ?? {};

          return  deleteOrder(orderId,fetchOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteOrderMutationResult = NonNullable<Awaited<ReturnType<typeof deleteOrder>>>
    
    export type DeleteOrderMutationError = null | null | Error

    /**
 * @summary Delete purchase order by identifier.
 */
export const useDeleteOrder = <TError = null | null | Error,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOrder>>, TError,{orderId: number}, TContext>, fetch?: RequestInit}
 ): UseMutationResult<
        Awaited<ReturnType<typeof deleteOrder>>,
        TError,
        {orderId: number},
        TContext
      > => {

      const mutationOptions = getDeleteOrderMutationOptions(options);

      return useMutation(mutationOptions );
    }
    